<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Ceramic Pot Generator</title>
    <script type="importmap">
        { 
            "imports": { 
                "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
                "three/addons/": "https://unpkg.com/three@0.158.0/examples/jsm/"
            }
        }
    </script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            overflow: hidden;
            background: #f5f5f5;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        #canvas-container {
            width: 80vw;
            height: 70vh;
            max-width: 800px;
            max-height: 600px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            position: relative;
        }

        .controls {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }

        button {
            padding: 10px 20px;
            background: #654321;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s;
        }

        button:hover {
            background: #876543;
        }

        .parameters {
            margin-top: 10px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
        }

        .parameter {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        select, input {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
        }

        .title {
            font-size: 24px;
            margin-bottom: 20px;
            color: #654321;
        }

        .info {
            position: absolute;
            bottom: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.7);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="title">3D Ceramic Pot Generator</div>
    
    <div id="canvas-container">
        <div class="info">Click and drag to rotate view</div>
    </div>
    
    <div class="controls">
        <button id="generate-btn">Generate New Pot</button>
        <button id="save-btn">Save Image</button>
    </div>
    
    <div class="parameters">
        <div class="parameter">
            <label for="complexity">Complexity:</label>
            <select id="complexity">
                <option value="low">Low</option>
                <option value="medium" selected>Medium</option>
                <option value="high">High</option>
            </select>
        </div>
        
        <div class="parameter">
            <label for="style">Style:</label>
            <select id="style">
                <option value="classic">Classic</option>
                <option value="modern" selected>Modern</option>
                <option value="abstract">Abstract</option>
            </select>
        </div>
        
        <div class="parameter">
            <label for="texture">Texture:</label>
            <select id="texture">
                <option value="smooth">Smooth</option>
                <option value="rough" selected>Rough</option>
                <option value="glazed">Glazed</option>
            </select>
        </div>
    </div>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        
        // Initialize the scene, camera, and renderer
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xffffff);
        
        // Set up renderer
        const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });
        const container = document.getElementById('canvas-container');
        renderer.setSize(container.clientWidth, container.clientHeight);
        container.appendChild(renderer.domElement);
        
        // Set up camera
        const camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);
        camera.position.set(0, 0, 15);
        
        // Add orbit controls for interaction
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enablePan = false;
        controls.minDistance = 10;
        controls.maxDistance = 25;
        
        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        
        const keyLight = new THREE.DirectionalLight(0xffffff, 0.7);
        keyLight.position.set(1, 1, 1);
        scene.add(keyLight);
        
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
        fillLight.position.set(-1, 0.5, -1);
        scene.add(fillLight);
        
        const backLight = new THREE.DirectionalLight(0xffffff, 0.2);
        backLight.position.set(0, -1, -1);
        scene.add(backLight);
        
        // Current pot object reference
        let currentPot = null;
        
        // Generate a random color palette for ceramics
        function generateColorPalette() {
            const baseColors = [
                0xA67B5B, // Terracotta
                0xC19A6B, // Clay
                0xE6D2B5, // Cream
                0x7D5A4E, // Brown clay
                0xB8A99B, // Light clay
                0xD9BFA9, // Beige
                0x8C7B6D, // Taupe
                0x4A3C2E  // Dark clay
            ];
            
            // Select a random base color
            const baseColor = baseColors[Math.floor(Math.random() * baseColors.length)];
            
            // Create variations for different parts of the pot
            return {
                base: baseColor,
                rim: adjustColorBrightness(baseColor, Math.random() * 0.3 - 0.1),
                highlight: adjustColorBrightness(baseColor, 0.2)
            };
        }
        
        // Helper function to adjust color brightness
        function adjustColorBrightness(hex, percent) {
            const r = (hex >> 16) & 255;
            const g = (hex >> 8) & 255;
            const b = hex & 255;
            
            const adjustedR = Math.min(255, Math.max(0, Math.round(r * (1 + percent))));
            const adjustedG = Math.min(255, Math.max(0, Math.round(g * (1 + percent))));
            const adjustedB = Math.min(255, Math.max(0, Math.round(b * (1 + percent))));
            
            return (adjustedR << 16) | (adjustedG << 8) | adjustedB;
        }
        
        // Generate a random pot profile based on parameters
        function generatePotProfile() {
            const complexity = document.getElementById('complexity').value;
            const style = document.getElementById('style').value;
            
            // Base parameters
            let segments = 10;
            let noiseFactor = 0.1;
            let asymmetry = 0.2;
            let baseWidth = 1.5 + Math.random() * 1;
            let neckWidth = 1 + Math.random() * 1.5;
            let height = 5 + Math.random() * 2;
            
            // Adjust based on complexity
            if (complexity === 'low') {
                segments = 6;
                noiseFactor = 0.05;
                asymmetry = 0.1;
            } else if (complexity === 'high') {
                segments = 15;
                noiseFactor = 0.2;
                asymmetry = 0.3;
            }
            
            // Adjust based on style
            if (style === 'classic') {
                baseWidth = 2 + Math.random() * 1;
                neckWidth = 1 + Math.random() * 0.8;
            } else if (style === 'abstract') {
                noiseFactor *= 2;
                asymmetry *= 2;
            }
            
            // Generate the profile curve points
            const points = [];
            
            // Add bottom center point
            points.push(new THREE.Vector2(0, -height / 2));
            
            // Generate base width
            points.push(new THREE.Vector2(
                baseWidth * (1 - Math.random() * noiseFactor * 0.5), 
                -height / 2 + height * 0.05
            ));
            
            // Generate middle points
            const controlPoints = segments;
            for (let i = 1; i <= controlPoints; i++) {
                const t = i / (controlPoints + 1);
                
                // Create a bell-shaped profile using a combination of functions
                const x = baseWidth * (1 - t) + neckWidth * t;
                
                // Add some random variation
                const noise = (Math.random() * 2 - 1) * noiseFactor;
                const adjustedX = x * (1 + noise);
                
                // Calculate y position (height)
                const y = -height / 2 + height * t;
                
                points.push(new THREE.Vector2(adjustedX, y));
            }
            
            // Add top rim point
            points.push(new THREE.Vector2(
                neckWidth * (1 + (Math.random() * 2 - 1) * noiseFactor), 
                height / 2
            ));
            
            // Add center top point
            points.push(new THREE.Vector2(0, height / 2));
            
            return points;
        }
        
        // Create a pot with the given profile
        function createPot() {
            // Remove current pot if it exists
            if (currentPot) {
                scene.remove(currentPot);
            }
            
            const points = generatePotProfile();
            
            // Create a lathe geometry from the profile points
            const segments = 32; // The number of segments around the pot's circumference
            const phiStart = 0;
            const phiLength = Math.PI * 2;
            
            const geometry = new THREE.LatheGeometry(points, segments, phiStart, phiLength);
            
            // Get selected texture
            const textureType = document.getElementById('texture').value;
            
            // Generate color palette
            const colorPalette = generateColorPalette();
            
            // Create material based on texture
            let material;
            
            if (textureType === 'smooth') {
                material = new THREE.MeshStandardMaterial({
                    color: colorPalette.base,
                    roughness: 0.3,
                    metalness: 0,
                });
            } else if (textureType === 'glazed') {
                material = new THREE.MeshPhysicalMaterial({
                    color: colorPalette.base,
                    roughness: 0.1,
                    metalness: 0,
                    clearcoat: 0.8,
                    clearcoatRoughness: 0.2,
                });
            } else { // rough
                material = new THREE.MeshStandardMaterial({
                    color: colorPalette.base,
                    roughness: 0.7,
                    metalness: 0,
                    flatShading: true
                });
                
                // Add more geometry detail for rough texture
                const positionAttribute = geometry.getAttribute('position');
                const vertex = new THREE.Vector3();
                
                for (let i = 0; i < positionAttribute.count; i++) {
                    vertex.fromBufferAttribute(positionAttribute, i);
                    
                    // Don't modify the bottom/top center points
                    if (vertex.x > 0.1) {
                        // Add subtle bumps to create roughness
                        const noise = (Math.random() - 0.5) * 0.1;
                        vertex.x += noise;
                        vertex.z += noise;
                    }
                    
                    positionAttribute.setXYZ(i, vertex.x, vertex.y, vertex.z);
                }
                
                positionAttribute.needsUpdate = true;
                geometry.computeVertexNormals();
            }
            
            // Create the mesh from geometry and material
            const pot = new THREE.Mesh(geometry, material);
            
            // Add the pot to the scene
            scene.add(pot);
            currentPot = pot;
            
            // Reset controls
            controls.reset();
        }
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        
        // Generate button handler
        document.getElementById('generate-btn').addEventListener('click', createPot);
        
        // Save button handler
        document.getElementById('save-btn').addEventListener('click', function() {
            const link = document.createElement('a');
            link.download = 'ceramic_pot.png';
            link.href = renderer.domElement.toDataURL('image/png');
            link.click();
        });
        
        // Handle window resize
        window.addEventListener('resize', function() {
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
        });
        
        // Generate initial pot and start animation
        createPot();
        animate();
    </script>
</body>
</html>
